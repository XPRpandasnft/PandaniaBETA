declare const getContractConstants: (chain?: string, systemDomain?: string) => {
    EOSIO: string;
    EOSIO_TOKEN: string;
    ACCOUNT_INFO: string;
    PROXY_INFO_ACCOUNT: string | undefined;
    EOSIO_MSIG: string;
    EOSIO_RAM: string;
    EOSIO_STAKE: string;
    EOSIO_PRODS: string;
    EOSIO_NULL: string;
    EOSIO_RAMFEE: string;
    EOSIO_VPAY: string;
    EOSIO_BPAY: string;
    EOSIO_REX: string;
    NEWACCOUNT_NAME_PARAM: string;
    EOSIO_MSIG_APPROVALS_TABLE: string;
    EOSIO_MSIG_PROPOSALS_TABLE: string;
    TRANSFER_ACTION: string;
    DELEGATE_BW_ACTION: string;
    UNDELEGATE_BW_ACTION: string;
    VOTE_PRODUCER_ACTION: string;
    BUY_RAM_ACTION: string;
    BUY_RAM_BYTES_ACTION: string;
    SELL_RAM_ACTION: string;
};

declare const dapps: ({
    name: string;
    description: string;
    shortDescription: string;
    symbol: string;
    statistics: boolean;
    accounts: string[];
    logo: string;
    website: string;
    app: string;
    telegram: string;
    medium: string;
    twitter: string;
    github: string;
    chains: string[];
    partner?: undefined;
    discord?: undefined;
} | {
    name: string;
    description: string;
    shortDescription: string;
    symbol: string;
    accounts: string[];
    logo: string;
    website: string;
    app: string;
    telegram: string;
    medium: string;
    twitter: string;
    github: string;
    chains: string[];
    statistics?: undefined;
    partner?: undefined;
    discord?: undefined;
} | {
    name: string;
    description: string;
    shortDescription: string;
    symbol: string;
    partner: boolean;
    accounts: string[];
    logo: string;
    website: string;
    app: string;
    telegram: string;
    medium: string;
    twitter: string;
    github: string;
    chains: string[];
    statistics?: undefined;
    discord?: undefined;
} | {
    name: string;
    description: string;
    shortDescription: string;
    symbol: string;
    partner: boolean;
    statistics: boolean;
    accounts: string[];
    logo: string;
    website: string;
    app: string;
    telegram: string;
    medium: string;
    twitter: string;
    github: string;
    chains: string[];
    discord?: undefined;
} | {
    name: string;
    description: string;
    shortDescription: string;
    symbol: string;
    partner: boolean;
    statistics: boolean;
    accounts: string[];
    logo: string;
    website: string;
    app: string;
    discord: string;
    telegram: string;
    medium: string;
    twitter: string;
    github: string;
    chains: string[];
})[];

interface Token {
    key: string;
    symbol: string;
    account: string;
    chain: string;
    supply: Supply;
    metadata: Metadata;
    pairs: Pair[];
    price: Price;
    rank: number;
}
interface Metadata {
    name: string;
    website: string;
    logo: string;
    created_at: Date;
    desc: string;
}
interface Pair {
    id: string;
    pair_base: string;
    pair_quote: string;
    exchange: string;
    quote: Quote;
    percentage_daily_volume: number;
}
interface Quote {
    price: number;
    volume_base_24h: number;
    volume_quote_24h: number;
    price_usd: number;
    volume_usd_24h: number;
}
interface Price {
    eos: number;
    usd: number;
    volume_base_24h: number;
    volume_usd_24h: number;
    marketcap_usd: number;
    change_24hr: number;
}
interface Supply {
    circulating: number;
    max: number;
    last_update: Date;
}
interface Provider {
    chainId: string;
    port: number;
    protocol: string;
    host: string;
    httpEndpoint: string;
    blockchain: string;
}
interface IConstants {
    CORE_PRECISION: number;
    MAX_VOTES?: number;
    CHAIN_START_DATE: Date | undefined;
    DEFAULT_ENDPOINTS: string[];
    ACTIONS_ENDPOINTS: string[];
    TRANSACTIONS_ENDPOINTS: string[];
    PROVIDER_ENDPOINTS: Provider[];
    HISTORY_TYPES: string[];
    API_URL: string;
    CORE_SYMBOL: string;
    CHAIN: string;
    DISPLAY_CHAIN: string;
    CHAIN_ID: string;
    DOMAIN_TITLE: string;
    KEY_PREFIX: string;
    LIGHT_API?: string;
    HYPERION_URL?: string;
    BLOKS_PROXY?: string;
    ALOHA_PROXY_URL?: string;
    ATOMICASSETS_API?: string;
    SIMPLEASSETS_API?: string;
    FIO_FEES_ACCOUNT?: string;
    SYSTEM_DOMAIN?: string;
    DEX_URL?: string;
    REX_ENABLED?: boolean;
    SUPPORTS_FREE_CPU?: boolean;
    VOTING_ENABLED?: boolean;
    NFTS_ENABLED?: boolean;
    SUPPORTS_RENTBW?: boolean;
    DISABLE_MEMO?: boolean;
}
interface HistoryTypeFeature {
    name: string;
    actionFilter: boolean;
    tokenFilter: boolean;
    dateFilter: boolean;
    contractActionFilter: boolean;
    total: number;
}
interface HistoryTypeFeatures {
    native: HistoryTypeFeature;
    dfuse: HistoryTypeFeature;
    hyperion: HistoryTypeFeature;
}

declare const exchanges: {
    Bithumb: {
        name: string;
        description: string;
        accounts: string[];
        logo: string;
        website: string;
    };
    OKEx: {
        name: string;
        description: string;
        accounts: string[];
        logo: string;
        website: string;
    };
    Bitfinex: {
        name: string;
        description: string;
        accounts: string[];
        logo: string;
        website: string;
    };
    "Gate.io": {
        name: string;
        description: string;
        accounts: string[];
        logo: string;
        website: string;
    };
    Kraken: {
        name: string;
        description: string;
        accounts: string[];
        logo: string;
        website: string;
    };
    Newdex: {
        name: string;
        description: string;
        accounts: string[];
        logo: string;
        website: string;
        linkGenerator: (token: Token, pair: Pair) => string;
    };
    DefiBox: {
        name: string;
        description: string;
        accounts: string[];
        logo: string;
        website: string;
        linkGenerator: (_: Token, __: Pair) => string;
    };
    Chaince: {
        name: string;
        description: string;
        accounts: string[];
        logo: string;
        website: string;
        linkGenerator: (_: Token, pair: Pair) => string;
    };
    Dexeos: {
        name: string;
        description: string;
        accounts: string[];
        logo: string;
        website: string;
        linkGenerator: (_: Token, pair: Pair) => string;
    };
    Hoo: {
        name: string;
        description: string;
        accounts: string[];
        logo: string;
        website: string;
        linkGenerator: (_: Token, pair: Pair) => string;
    };
    Whaleex: {
        name: string;
        description: string;
        accounts: string[];
        logo: string;
        website: string;
        linkGenerator: (_: Token, pair: Pair) => string;
    };
    Chainrift: {
        name: string;
        description: string;
        accounts: never[];
        logo: string;
        website: string;
        linkGenerator: (_: Token, pair: Pair) => string;
    };
    Eosdaq: {
        name: string;
        description: string;
        accounts: never[];
        logo: string;
        website: string;
        linkGenerator: (_: Token, pair: Pair) => string;
    };
    BigONE: {
        name: string;
        description: string;
        accounts: never[];
        logo: string;
        website: string;
        linkGenerator: (_: Token, pair: Pair) => string;
    };
    YOLO: {
        name: string;
        description: string;
        accounts: never[];
        logo: string;
        website: string;
        linkGenerator: (_: Token, pair: Pair) => string;
    };
    Bancor: {
        name: string;
        description: string;
        accounts: never[];
        logo: string;
        website: string;
        linkGenerator: (_: Token, pair: Pair) => string;
    };
    Alcor: {
        name: string;
        description: string;
        accounts: never[];
        logo: string;
        website: string;
        linkGenerator: (_: Token, __: Pair) => string;
    };
    "Defis.Network": {
        name: string;
        description: string;
        accounts: never[];
        logo: string;
        website: string;
        linkGenerator: (_: Token, __: Pair) => string;
    };
    DolphinSwap: {
        name: string;
        description: string;
        accounts: never[];
        logo: string;
        website: string;
        linkGenerator: (_: Token, __: Pair) => string;
    };
    Proton: {
        name: string;
        description: string;
        accounts: never[];
        logo: string;
        website: string;
        linkGenerator: (_: Token, __: Pair) => string;
    };
    MetalX: {
        name: string;
        description: string;
        accounts: never[];
        logo: string;
        website: string;
        linkGenerator: (_: Token, __: Pair) => string;
    };
    Coingecko: {
        name: string;
        description: string;
        accounts: never[];
        logo: string;
        website: string;
        linkGenerator: (_: Token, __: Pair) => string;
    };
};

declare const SCATTER_DESKTOP = "ScatterSockets";
declare const SCATTER_DESKTOP_MANUAL = "ScatterSocketsManual";
declare const SCATTER_EXTENSION = "ScatterExtension";
declare const LEDGER = "ledger";
declare const LEDGER_USB = "TransportU2F";
declare const LEDGER_BLE = "TransportWebBLE";
declare const LEDGER_WEBUSB = "TransportWebusb";
declare const LEDGER_WEBHID = "TransportWebHID";
declare const LYNX = "lynx";
declare const PROTON = "proton";
declare const PROTON_WEB = "protonweb";
declare const ANCHOR = "anchor";
declare const SIMPLEOS = "simpleos";
declare const EOSAUTH = "eosauth";
declare const CLEOS = "cleos";
declare const EOSC = "eosc";
declare const PROTON_CLI = "protoncli";
declare const CLIO = "clio";
declare const KEYCAT = "keycat";
declare const TREZOR = "trezor";
declare const SQRL = "sqrl";
declare const WOMBAT = "wombat";
declare const WAX_CLOUD_WALLET = "WaxCW";

declare const historyTypesFeatures: {
    native: {
        name: string;
        actionFilter: boolean;
        tokenFilter: boolean;
        dateFilter: boolean;
        contractActionFilter: boolean;
        total: number;
    };
    dfuse: {
        name: string;
        actionFilter: boolean;
        tokenFilter: boolean;
        dateFilter: boolean;
        contractActionFilter: boolean;
        total: number;
    };
    hyperion: {
        name: string;
        actionFilter: boolean;
        tokenFilter: boolean;
        dateFilter: boolean;
        contractActionFilter: boolean;
        total: number;
    };
};

declare const chainInfo: {
    "proton-test": {
        key: string;
        text: string;
        value: string;
        image: string;
        testnet: boolean;
    };
    local: {
        key: string;
        text: string;
        value: string;
        image: string;
        testnet: boolean;
    };
    "wax-test": {
        key: string;
        text: string;
        value: string;
        image: string;
        testnet: boolean;
    };
    "fio-test": {
        key: string;
        text: string;
        value: string;
        image: string;
        testnet: boolean;
    };
    jungle3: {
        key: string;
        text: string;
        value: string;
        image: string;
        testnet: boolean;
    };
    kylin: {
        key: string;
        text: string;
        value: string;
        image: string;
        testnet: boolean;
    };
    proton: {
        key: string;
        text: string;
        value: string;
        image: string;
    };
    eos: {
        key: string;
        text: string;
        value: string;
        image: string;
    };
    wax: {
        key: string;
        text: string;
        value: string;
        image: string;
    };
    fio: {
        key: string;
        text: string;
        value: string;
        image: string;
    };
};

declare const DEFAULT_SYMBOL = "EOS";
declare const DEFAULT_SYSTEM_DOMAIN = "eosio";
declare const DEFAULT_CHAIN = "eos";

declare const chainToNetworkConstantsMap: {
    [name: string]: IConstants;
};
declare class Constants {
    [key: string]: any;
    constructor();
    initialize(chain?: string): void;
    setNetwork(chain: string): void;
    setCommon(chain: string): void;
    setContract(chain: string, systemDomain?: string): void;
    setConstants(newConstants: object): void;
}
declare const constants: Constants;

export { ANCHOR, CLEOS, CLIO, Constants, DEFAULT_CHAIN, DEFAULT_SYMBOL, DEFAULT_SYSTEM_DOMAIN, EOSAUTH, EOSC, HistoryTypeFeature, HistoryTypeFeatures, IConstants, KEYCAT, LEDGER, LEDGER_BLE, LEDGER_USB, LEDGER_WEBHID, LEDGER_WEBUSB, LYNX, Metadata, PROTON, PROTON_CLI, PROTON_WEB, Pair, Price, Provider, Quote, SCATTER_DESKTOP, SCATTER_DESKTOP_MANUAL, SCATTER_EXTENSION, SIMPLEOS, SQRL, Supply, TREZOR, Token, WAX_CLOUD_WALLET, WOMBAT, chainInfo, chainToNetworkConstantsMap, constants, dapps, exchanges, getContractConstants, historyTypesFeatures };
